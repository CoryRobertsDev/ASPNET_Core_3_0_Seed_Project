// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace EquipmentManager.Models
{
    [Table("Repair")]
    public class Repair
    {
        [Key] [Display(Name = "Repair ID")] public int Id { get; set; }

        [Display(Name = "Equip. ID")] public int EquipmentId { get; set; }

        [Required]
        [Display(Name = "Requested By")]
        public string RequestedBy { get; set; }

        [Required] [Display(Name = "RMA #")] public string RmaNum { get; set; }

        [Column(TypeName = "date")]
        [Display(Name = "Date Shipped")]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime DateShipped { get; set; }

        [Required]
        [Display(Name = "Tracking #")]
        public string TrackingNum { get; set; }

        [Required]
        [Display(Name = "Recipient")]
        public string Recipient { get; set; }

        [Required]
        [Display(Name = "Address 1")]
        public string StreetAddress1 { get; set; }

        [Display(Name = "Address 2")] public string StreetAddress2 { get; set; }

        [Display(Name = "Address 3")] public string StreetAddress3 { get; set; }

        [Required] [Display(Name = "City")] public string City { get; set; }

        [Display(Name = "State")]
        [Required(ErrorMessage = "State is required")]
        public int StateId { get; set; }

        public string State { get; set; }

        [Required(ErrorMessage = "Zip Code is required")]
        [Display(Name = "Zip")]
        [RegularExpression("(^\\d{5}(-\\d{4})?$)|(^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$)",
            ErrorMessage = "Zip code is invalid.")] // US or Canada
        public string Zip { get; set; }

        [Display(Name = "Country")] public string Country { get; set; }

        [Display(Name = "Email")] public string ContactEmail { get; set; }

        [Display(Name = "Phone")] public string ContactPhone { get; set; }

        [Display(Name = "New Serial #")] public string ReplacementSerialNumber { get; set; }


        [Display(Name = "Returned?")] public bool? Returned { get; set; }

        [Column(TypeName = "date")]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        [Display(Name = "Date Returned")]
        public DateTime? DateReturned { get; set; }

        [Display(Name = "Address")]
        public string FriendlyAddress => string.IsNullOrWhiteSpace(StreetAddress1)
            ? $"{City}, {StateId}, {Zip}"
            : string.IsNullOrWhiteSpace(StreetAddress2)
                ? $"{StreetAddress1}, {City}, {StateId}, {Zip}"
                : $"{StreetAddress1} - {StreetAddress2}, {City}, {StateId}, {Zip}";
    }
}