// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EquipmentManager.Models
{
    public partial class UcInventoryContext : DbContext
    {
        public UcInventoryContext()
        {
        }

        public UcInventoryContext(DbContextOptions<UcInventoryContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<EquipmentType> EquipmentTypes { get; set; }
        public virtual DbSet<Manufacturer> Manufacturers { get; set; }
        public virtual DbSet<Repair> Repairs { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Assignment>()
                .HasOne<Department>(s => s.Department)
                .WithMany(g => g.Assignments);
             

            modelBuilder.Entity<Assignment>(entity =>
            {

                entity.ToTable("Assignment");

                entity.Property(e => e.AssignedBy).IsRequired();

                entity.Property(e => e.AssignedDate).HasColumnType("date");

                entity.Property(e => e.ColleagueId).IsRequired();

                entity.Property(e => e.RequestingDepartment).IsRequired();

                entity.Property(e => e.UnassignedDate).HasColumnType("date");


            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("Department");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.Property(e => e.ColleaugeId).HasMaxLength(10);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(49)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(concat([FirstName],[LastName]+'@ucwv.edu'))");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(concat([FirstName],[LastName]))");
            });

            modelBuilder.Entity<Equipment>(entity =>
            {
                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DecommissionDate).HasColumnType("datetime");

                entity.Property(e => e.DestroyDate).HasColumnType("datetime");

                entity.Property(e => e.EquipType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.InvoiceNum)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RequestedBy)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.RequestingDept)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SerialNum)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceTag).HasMaxLength(50);

                entity.Property(e => e.SubModel).HasMaxLength(50);

                entity.Property(e => e.Vendor)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<EquipmentType>(entity =>
            {
                entity.ToTable("EquipmentType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Manufacturer>(entity =>
            {
                entity.ToTable("Manufacturer");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<Repair>(entity =>
            {
                entity.ToTable("Repair");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ContactEmail).HasMaxLength(100);

                entity.Property(e => e.ContactPhone).HasMaxLength(100);

                entity.Property(e => e.Country).HasMaxLength(100);

                entity.Property(e => e.DateReturned).HasColumnType("date");

                entity.Property(e => e.DateShipped).HasColumnType("date");

                entity.Property(e => e.Recipient)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReplacementSerialNumber).HasMaxLength(100);

                entity.Property(e => e.RequestedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RmaNum)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StreetAddress1)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.StreetAddress2).HasMaxLength(100);

                entity.Property(e => e.StreetAddress3).HasMaxLength(100);

                entity.Property(e => e.TrackingNum)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Zip)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.ToTable("State");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.ToTable("Vendor");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}